"""
Exercise 16
Write a password generator in Python. Be creative with how you generate passwords - 
strong passwords have a mix of lowercase letters, uppercase letters, numbers, and symbols. 
The passwords should be random, generating a new password every time the user asks for a new password. 
Include your run-time code in a main method.

Extra:
Ask the user how strong they want their password to be. 
For weak passwords, pick a word or two from a list.

"""

import string
import random

def menu():
    print('*'*50)
    print('Do you want to generate a random password?\n\nOptions:')
    print('0 - No. I\'d like to exit.')
    print('1 - Yes, a strong password.')
    print('2 - Yes, a normal password.')
    print('3 - Yes, a simple password.')
    ans = int(input('\nYour choice: '))
    if ans not in [0,1,2,3]:
        print('Not a valid option.')
        ans = 0
    return int(ans)


def password_length():
    print('-'*20)
    l = int(input('Preferred password length?\nPick bet 8 to 10\nYour choice: '))
    if l>=8 and l<=10:
        return l
    else:
        print('\nYour choice is out of specified range.\nLength will be randomly decided now.')
        l = random.randint(8, 10)
        print(f'Password length: {l}')
        return l


def strong_password():
    l = random.randint(10, 12)
    pchar = string.ascii_letters + string.digits + string.punctuation
    weak = True
    while weak:
        pasw = ''
        for i in range(l):
            pasw = pasw + (pchar[random.randint(0, len(pchar)-1)])
        if (
            sum([True if ch in string.ascii_uppercase else False for ch in pasw]) > 2 and
            sum([True if ch in string.digits else False for ch in pasw]) > 2 and
            sum([True if ch in '!@#$%^&*' else False for ch in pasw]) > 2
           ) :
            weak = False
        
    return pasw

def normal_password(l):
    pchar = string.ascii_letters + string.digits + '!@#$%^&*'
    weak = True
    while weak:
        pasw = ''
        for i in range(l):
            pasw = pasw + (pchar[random.randint(1, len(pchar)-1)])
        if (
            sum([True if ch in string.ascii_uppercase else False for ch in pasw]) > 1 and
            sum([True if ch in string.digits else False for ch in pasw]) > 1 and
            sum([True if ch in '!@#$%^&*' else False for ch in pasw])
           ) :
            weak = False
    return pasw

def weak_password():
    plist = ['password', 'opensesame', '123456', '987654']
    pasw = plist[random.randint(0, len(plist)-1)]
    return pasw


need_password = True
while need_password:
    rep = menu()
    if rep == 1:
        pasw = strong_password()
    elif rep == 2:
        pasw = normal_password(password_length())
    elif rep == 3:
        pasw = weak_password()
    else:
        print('Program will end now.')
        break
    
    print("-"* 30)
    print(f'Random Password: {pasw}')
    print("-"* 30)
    need_password = True if input('\nInput y to generate another password? : ') == 'y' else False
    print('')
    
